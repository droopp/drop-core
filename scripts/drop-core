#!/bin/bash

set -e

banner() {

    echo "                    ___           ___           ___   "
    echo "     _____         /\  \         /\  \         /\  \  "
    echo "    /::\  \       /::\  \       /::\  \       /::\  \ "
    echo "   /:/\:\  \     /:/\:\__\     /:/\:\  \     /:/\:\__\ "
    echo "  /:/  \:\__\   /:/ /:/  /    /:/  \:\  \   /:/ /:/  / "
    echo " /:/__/ \:|__| /:/_/:/__/___ /:/__/ \:\__\ /:/_/:/  /  "
    echo " \:\  \ /:/  / \:\/:::::/  / \:\  \ /:/  / \:\/:/  /   "
    echo "  \:\  /:/  /   \::/~~/~~~~   \:\  /:/  /   \::/__/    "
    echo "   \:\/:/  /     \:\~~\        \:\/:/  /     \:\  \    "
    echo "    \::/  /       \:\__\        \::/  /       \:\__\   "
    echo "     \/__/         \/__/         \/__/         \/__/   "
    echo " "
    echo " "
    echo " "
    echo "     Distribued Reliable Operations Platform           "
    echo " "
    echo " "
    echo " "

}

sleep 5

export $(xargs < /etc/drop-env)

export DROP_IS_MCAST="y"

if [ "x" == "x$DROP_STRATEGY" ] 
then
    export DROP_STRATEGY="simple"
fi

ERL_HOME=/opt/erlang/bin/
DROP_HOME="$(dirname $(realpath $0))/../"

DROP_SSL_CRT="/etc/ssl/drop/drop-core.pem"

DROP_LOG_DIR=/var/lib/drop/logs
DROP_VAR_DIR=/var/lib/drop
DROP_COOKIE=mesh1
ERL_MAX_ETS_TABLES=50000
DROP_IO_THREAD_POOL_SIZE=128
ERL_MAX_PROC=1048576
ERL_MAX_PORTS=65536
ERL_MAX_ATOMS=5000000
ERL_DBUFFER_SIZE=32000
DROP_LOGGER_MF_BYTES=10485760
DROP_LOGGER_MF_FILES=10
HEART_BEAT_TIMEOUT=30
HEART_COMMAND="${DROP_HOME}/scripts/drop-core"
DROP_EBIN_ROOT="${DROP_HOME}/ebin ${DROP_HOME}/apps/*/ebin ${DROP_HOME}/deps/*/ebin "
ERL_CRASH_DUMP="${DROP_LOG_DIR}/erl_crash.dump"
NOTIFY_SOCKET=


if [ ! -d ${DROP_LOG_DIR} ]; then
        mkdir -p "${DROP_LOG_DIR}"
fi
if [ ! -d ${DROP_VAR_DIR} ]; then
        mkdir -p "${DROP_VAR_DIR}"
fi

# add plugin dir
if [ ! -d ${DROP_VAR_DIR}/plugins/ ]; then
        mkdir -p "${DROP_VAR_DIR}/plugins/"
fi

if [ ! -f ${DROP_VAR_DIR}/drop-id ]; then
    uuidgen > ${DROP_VAR_DIR}/drop-id
fi

if [ -f ${DROP_VAR_DIR}/drop-hosts ]; then
    export DROP_IS_MCAST="n"
    cat ${DROP_VAR_DIR}/drop-hosts |awk '{printf "\47%s\47.\n", $1}END{print ""}' > ${DROP_HOME}/.hosts.erlang

fi

NODE_NAME="$(cat /var/lib/drop/drop-id)"

# VIP
DROP_VIP="127.0.0.1"

if [ "x" == "x$DROP_IFACE" ]
then
    DROP_VIP_IFACE="$(/sbin/ip ro |grep default |head -1|awk '{print $5}')"

    # no found - set to loopback
    if [ "x" == "x$DROP_VIP_IFACE" ]
    then
        DROP_VIP_IFACE=lo
    fi

else
    DROP_VIP_IFACE=$DROP_IFACE
fi

# check if iface exist and up
is_exist="$(/sbin/ip -f inet addr show $DROP_VIP_IFACE| wc -l)"
if [[ "$is_exist" -eq "0" ]]; then
    DROP_VIP_IFACE=lo
fi

HOSTNAME="$(/sbin/ip -f inet addr show $DROP_VIP_IFACE | grep -v :0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')"
HOSTNAME0=`env hostname -f`

IS_SHORT="$(echo $HOSTNAME|grep '\.'|wc -l)"
SNAME="-sname "


if [ "$IS_SHORT" -eq "1" ]; then
    SNAME="-name"
fi

if [ "x" != "x$ERL_HOME" ] 
then
    export PATH=${ERL_HOME}:$PATH
fi

if [ "x" = "x$NODE_NAME" ] 
then
    DROP_NAME=drop@${HOSTNAME}
else
    DROP_NAME=${NODE_NAME}@${HOSTNAME}
fi


help() {

    banner

    echo " start - start drop-core"
    echo " stop  - stop drop-core"
    echo " remsh - remote shell"
    echo ""

}

remsh() {

    exec erl \
        -setcookie ${DROP_COOKIE} \
        -remsh ${DROP_NAME} \
        -hidden \
        -connect_all false \
        ${SNAME} remsh
}


stop() {

    exec erl \
        -noshell \
        -hidden \
        -connect_all false \
        ${SNAME} temp_control \
        -setcookie ${DROP_COOKIE} \
        -eval "rpc:call('${DROP_NAME}', init, stop, [])" -s init stop

}

stop_s() {

    # stop all depend services if beam not started
    count=$(ps -aux|grep beam.smp|grep drop-core|grep -v grep| wc -l)

    if [ "$count" -eq "0" ]; then
        # core is down
    
        iis=$(/sbin/ip a |grep $DROP_VIP_IFACE:0 |wc -l)

        if [[ "$iis" -ne "0" && "none" != "$DROP_VIP_STRGY" ]]; then
	    sudo /sbin/ip addr del $(/sbin/ip -o addr show label $DROP_VIP_IFACE:0|awk '{print $4}') dev $DROP_VIP_IFACE
        fi

        # clear state
        /opt/drop-core/priv/flower_sc_stream/flower_sc_stream --op make_hosts --var-dir $DROP_VAR_DIR --node $DROP_NAME

    else

        # check network change

        cip=$(ps -aux|grep beam.smp|grep drop-core|grep -v grep| cut -d'@' -f 2|awk '{print $1}')
        if [ "$cip" != "$HOSTNAME" ]; then
            sudo systemctl restart drop-core
        fi

        # check sys functions is started

        declare -a arr=("node_collector"                                    
                        "node_info_stream"
                        "flower"
                        "flower_sc_stream")
                        
        for i in "${arr[@]}"
        do
         cip=$(ps -aux|grep "\-drop $i$"|grep -v grep|wc -l)

         if [ "$cip" == "0" ]; then
            sudo systemctl restart drop-core
         fi
            
        done      

    fi
                   
}


start() {

    banner
    
    # stop prev epmd if exist
    cepmd=$(ps -aux|grep epmd|grep -v grep |awk '{print $2}')
    if [ "$cepmd" != "" ]; then
        echo "stop prev epmd service..$cepmd"
        sudo kill -9 $cepmd
    fi

    cd ${DROP_HOME}

    SSL_OPTS=""
    if [ -f ${DROP_SSL_CRT}  ]; then
        SSL_OPTS="-proto_dist inet_tls -ssl_dist_opt server_certfile ${DROP_SSL_CRT}"
    fi


    # start
    exec erl \
        ${SNAME} ${DROP_NAME} \
        -setcookie ${DROP_COOKIE} \
        +K true \
        +A ${DROP_IO_THREAD_POOL_SIZE} \
        +W w \
        +P ${ERL_MAX_PROC} \
        +Q ${ERL_MAX_PORTS} \
        +t ${ERL_MAX_ATOMS} \
        +e ${ERL_MAX_ETS_TABLES} \
        +stbt s \
        +scl true \
        +zdbbl ${ERL_DBUFFER_SIZE} \
        -boot start_sasl \
        -sasl errlog_type error \
        -sasl sasl_error_logger false \
        -sasl error_logger_mf_dir \"${DROP_LOG_DIR}\" \
        -sasl error_logger_mf_maxbytes ${DROP_LOGGER_MF_BYTES} \
        -sasl error_logger_mf_maxfiles ${DROP_LOGGER_MF_FILES} \
        -kernel start_pg true \
        -pa ${DROP_EBIN_ROOT} \
        -env NODE_NAME ${NODE_NAME} \
        -env HOSTNAME0 ${HOSTNAME0} \
        -env DROP_HOME ${DROP_HOME} \
        -env DROP_VAR_DIR ${DROP_VAR_DIR} \
        -env DROP_LOG_DIR ${DROP_LOG_DIR} \
        -env DROP_VIP ${DROP_VIP} \
        -env DROP_VIP_IFACE ${DROP_VIP_IFACE} \
        -noshell \
        -noinput \
        ${SSL_OPTS} \
        -s main 

        # -noinput
        # -noshell
        # -heart \
        # -env HEART_BEAT_TIMEOUT ${HEART_BEAT_TIMEOUT} \
        # -env HEART_COMMAND ${HEART_COMMAND} \
        # -proto_dist inet_tls \
        # -ssl_dist_opt ${DROP_SSL_OPT} \
 
}

if [ $# -eq 0 ]
  then
      help
  else
      if [ $1 = "start" ]; then
          start
      elif [ $1 = "stop" ]; then
          stop
      elif [ $1 = "stop_s" ]; then
          stop_s
      elif [ $1 = "remsh" ]; then
          remsh
      fi
fi
