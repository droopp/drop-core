#!/opt/drop-pyenv3/bin/python

#
# Collector node worker
#
# params
# $1 - path to var data
# $2 - max ponits to flush
# $3 - max time to flush

import sys
import time
import json
import os
import sqlite3


# API


def read():
    line = sys.stdin.readline()
    return line.strip()


def log(m):
    sys.stderr.write("{}: {}\n".format(time.time(), m))
    sys.stderr.flush()


def send(m):
    sys.stdout.write("{}\n".format(m))
    sys.stdout.flush()


# Process - actor
#  read - recieve message from world
#  send - send message to world
#  log  -  logging anything


def check_table(cur):

    cur.execute("""CREATE TABLE IF NOT EXISTS
                                node_world(uuid text UNIQUE,
                                           node text,
                                           hostname text,
                                           active integer,
                                           date date_time,
                                           group0 text,
                                           detail text
                )
                """)
    cur.execute("""CREATE INDEX IF NOT EXISTS idx_node_world ON node_world(uuid)
                """)

    cur.execute("""CREATE TABLE IF NOT EXISTS
                                node_list(node text,
                                          active integer,
                                          date date_time,
                                          msg text
                )
                """)
    cur.execute("""CREATE INDEX IF NOT EXISTS idx_node_list ON node_list(node)
                """)

    cur.execute("""CREATE TABLE IF NOT EXISTS
                                ppool_list(node text,
                                           name text,
                                           date date_time,
                                           error integer,
                                           timeout integer,
                                           running integer,
                                           ok integer,
                                           elapsed REAL,
                                           nomore integer
                )
                """)
    cur.execute("""CREATE INDEX IF NOT EXISTS idx_ppool_list ON ppool_list(node, name)
                """)

    cur.execute("""CREATE TABLE IF NOT EXISTS
                                node_stat(node text,
                                          date date_time,
                                          cpu_count integer,
                                          cpu_percent real,
                                          ram_count integer,
                                          ram_percent real,
                                          disk_count integer,
                                          disk_percent real,
                                          net_count integer
                )
                """)
    cur.execute("""CREATE INDEX IF NOT EXISTS idx_node_stat ON node_stat(node)
                """)

    cur.execute("""CREATE TABLE IF NOT EXISTS
                                ppool_stat(node text,
                                           name text,
                                           date date_time,
                                           count integer,
                                           cpu_percent real,
                                           ram_percent real
                )
                """)

    cur.execute("""CREATE INDEX IF NOT EXISTS idx_ppool_stat ON ppool_stat(node, name)
                """)


def insert_node_world(args):

    """
    system::node_world::%Node::%Info
    """

    _ops = """INSERT OR IGNORE INTO node_world(uuid, node, active, date, group0, detail)
                   VALUES ('{uuid}', '{node}', {active}, CURRENT_TIMESTAMP,
                           '{group0}', '...');

              ---

              UPDATE node_world
               SET node = '{node}', hostname = '{detail}', active = 1
              WHERE uuid = '{uuid}';

           """.format(uuid=args[2].split("@")[0],
                      node=args[2],
                      active=1,
                      group0=None,
                      detail=args[3])

    return _ops.split("---")


def update_node_world(args):

    """
    system::gatewayapi::%Node::%Info
    """
    data = args[4]
    try:
        date = data.get("timestamp")
    except:
        date = None

    return """UPDATE node_world
               SET group0='{group0}', detail='{detail}', date = CURRENT_TIMESTAMP, active = 1
              WHERE uuid = '{uuid}'
                AND (julianday(ifnull(date, CURRENT_TIMESTAMP)) - 2440587.5) * 86400.0  <= {date};
              """.format(uuid=args[2].split("@")[0], node=args[2], group0=args[3], detail=data,
                         date=(lambda x: x or time.time())(date))


def insert_node_info(args):

    """
    system::node_watch::%Node::nodedown::%Info
    """

    return """INSERT INTO node_list(node, active, date, msg)
                   VALUES ('{node}', {active}, CURRENT_TIMESTAMP,
                           '{msg}');""".format(node=args[2],
                                               active=(lambda x: x != "nodedown" and 1 or 0)(args[3]),
                                               msg=args[4])


def insert_ppool_info(args):

    if args[1] == "warning" and args[2] == "nomore":
        args = [0, args[3], args[4], 0, 0, 0, 0, 0, args[5]]
    else:
        args.append(0)

    return """INSERT INTO ppool_list(node, name, date, error, timeout, running, ok, elapsed, nomore)
                   VALUES ('{node}', '{name}', CURRENT_TIMESTAMP,
                           {error}, {timeout}, {running},
                           {ok}, {elapsed}, {nomore});""".format(node=args[1], name=args[2],
                                                                 error=args[3], timeout=args[4],
                                                                 running=args[5], ok=args[6],
                                                                 elapsed=args[7], nomore=args[8])


def insert_node_stat(data):

    return """INSERT INTO node_stat(node, date, cpu_count, cpu_percent,
                                         ram_count, ram_percent, disk_count,
                                         disk_percent, net_count)
                   VALUES ('{0}', CURRENT_TIMESTAMP, {1}, {2}, {3}, {4}, {5}, {6},
                           {7})""".format(data["node"], data["cpu_count"],
                                          data["cpu_percent"], data["ram_count"],
                                          data["ram_percent"], data["disk_count"],
                                          data["disk_percent"], data["net_count"])


def insert_ppool_stat(data):

    return """INSERT INTO ppool_stat(node, name, date, count,
                                         cpu_percent, ram_percent)
                   VALUES ('{0}', '{1}', CURRENT_TIMESTAMP,
                           {2}, {3}, {4})""".format(data["node"], data["name"],
                                                    data["count"], data["cpu_percent"],
                                                    data["ram_percent"])


def clear_last_rows(cur, t):
    cur.execute("DELETE FROM node_stat WHERE date < DATETIME('NOW', '-{} minutes');".format(t))
    cur.execute("DELETE FROM ppool_stat WHERE date < DATETIME('NOW', '-{} minutes');".format(t))
    cur.execute("DELETE FROM ppool_list WHERE date < DATETIME('NOW', '-{} minutes');".format(t))
    cur.execute("UPDATE node_world SET active = 0 WHERE date < DATETIME('NOW', '-{} seconds');".format(30))
    cur.execute("DELETE FROM node_list WHERE date < DATETIME('NOW', '-{} minutes');".format(t*3))


def connect(p):
    try:
        return sqlite3.connect(p + '/node_collector.db', timeout=3)
    except Exception as e:
        log("{}: {}".format(p, e))
        raise Exception(e)


def main(p, cnt, t):

    if not os.path.exists(p):
        os.makedirs(p)

    #  create dbs
    conn = connect(p)
    cur = conn.cursor()

    check_table(cur)
    conn.commit()
    conn.close()

    n = cnt
    tb = time.time()
    data_list = []
    data_nomore_list = {}

    while 1:

        msg = read()
        if not msg:
            break

        log("start working..")
        log("get message: " + msg)

        #
        # Catch msg from node_watch
        # up/dowm nodes
        #

        if msg.startswith("system::node_watch::"):

            # simple line format

            args = msg.split("::")
            data_list.append(insert_node_info(args))

            send("ok")

        #
        # Catch msg from node_world
        # free nodes
        #
        elif msg.startswith("system0::node_world::"):

            # simple line format

            args = msg.split("::")
            data_list.extend(insert_node_world(args))

            send("ok")

        #
        # Catch msg from mcast
        # update nodes
        #
        elif msg.startswith("system0::"):

            # simple line format

            args = msg.split("::")
            data_list.append(update_node_world(args))

            send("ok")

        #
        # Catch msg from ppools
        # timeout/error/nomore
        #

        elif msg.startswith("system::"):

            # system msg

            args = msg.split("::")

            # get stat by tick
            if args[1] not in ["error", "timeout"]:

                if args[1] == "warning" and args[2] == "nomore":
                    ids = "{}::{}".format(args[3], args[4])
                    data_nomore_list[ids] = args[5]

                else:
                    data_list.append(insert_ppool_info(args))

            send("ok")

        else:

            #
            # Catch msg json
            #

            data = json.loads(msg)

            if data["tag"] == "node_stat":
                data_list.append(insert_node_stat(data))

            elif data["tag"] == "ppool_stat":
                data_list.append(insert_ppool_stat(data))

            send(json.dumps(data))

        # clear last rows
        n -= 1
        if n == 0 or time.time() - tb > t:
            log("flush tables..")

            for k, v in data_nomore_list.items():
                data_list.append(insert_ppool_info("system::warning::nomore::{}::{}".
                                                   format(k, v).split("::")))

            conn = connect(p)
            cur = conn.cursor()

            cur.execute("PRAGMA JOURNAL_MODE=OFF;")
            cur.execute("PRAGMA SYNCHRONOUS=OFF;")

            for i in data_list:
                cur.execute(i)
            conn.commit()

            clear_last_rows(cur, t)
            conn.commit()

            conn.close()

            tb = time.time()
            n = cnt
            data_list = []
            data_nomore_list = {}


if __name__ == "__main__":

    # read args actor parameters                                               
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--db', type=str, help='Path to db')
    parser.add_argument('--flush-count',
                        type=int,
                        default=1000,
                        help='Count to flush to db')
    parser.add_argument('--flush-time',
                        type=int,
                        default=5000,
                        help='Time to flush to db')

    args, _ = parser.parse_known_args()

    main(args.db, args.flush_count, args.flush_time)
