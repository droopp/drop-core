#!/opt/drop-pyenv3/bin/python

#
# Flow scheduler worker
#
# params
# $1 - path to var data
# $2 - node name
# $3 - time interval sc
# $4 - vip
# $5 - vip iface

import sys
import os
import time
import json
import sqlite3
import glob
import subprocess as sp

# API


def read():
    line = sys.stdin.readline()
    return line.strip()


def log(m):
    sys.stderr.write("{}: {}\n".format(time.time(), m))
    sys.stderr.flush()


def send(m):
    sys.stdout.write("{}\n".format(m))
    sys.stdout.flush()

# Process - actor
#  read - recieve message from world
#  send - send message to world
#  log  -  logging anything


def main(p, node, t, vip, vip_iface):
    """
        t - time interval in secs
    """
    tb = time.time()

    # set vip
    _is_vip_set = 0
    _vip = vip

    while 1:

        #  set clester network balancer
        #  get main node floating ip
        log("get main node..")
        m_nodes, m_cnt = get_active_nodes(p)

        log("get active nodes: {}".format(m_nodes))

        if len(m_nodes) == 0 and m_cnt == -1:
            log("WARN: Split brain occured!!!")
            m_node = None

        elif len(m_nodes) == 0:
            m_node = None

        else:
            m_node = m_nodes[0]
            m_cnt = m_cnt/len(m_nodes)

        if m_node != node:
            log("i'm not main node {} ..set rserv".format(m_node))

            if m_node is None:
                # start and wait message from world 15 secs
                for i in range(5):
                    log("....wait messages from world...")
                    send("ok")
                    time.sleep(int(t))

            # not set or set to main
            if _is_vip_set == 0 or _is_vip_set == 1:
                # set real server
                if make_vip(m_nodes, False, _vip, vip_iface) is None:
                    _is_vip_set = 2
                else:
                    _is_vip_set = 0

            if time.time() - tb < int(t) * 5:
                send("ok")

                time.sleep(int(t))
                continue
            else:
                tb = time.time()
                make_hosts(p, node)
                make_connection(p, node)

                send("ok")
                log("tick..")

                time.sleep(int(t))
                continue

        else:

            if m_cnt < 1:
                log("main node {} but not enough metrics {}".format(m_node, m_cnt))
                send("ok")

                time.sleep(int(t))
                continue

            # not set or set to main
            if _is_vip_set == 0 or _is_vip_set == 2:
                # set real server
                if make_vip(m_nodes, True, _vip, vip_iface) is None:
                    _is_vip_set = 1
                else:
                    _is_vip_set = 0

            log("main node {} ..set admin".format(m_node))

        if time.time() - tb < int(t) * 5:
            send("ok")

            time.sleep(int(t))
            continue
        else:
            tb = time.time()
            make_hosts(p, node, True)

        # get node's statistic
        log("get stats..")
        pstats = get_stats(p)

        #  get flows scenes
        #  start/stop flows
        log("start init flows..")
        start_init_flows(p, pstats, m_nodes, get_flows(p))

        # check vip changed
        _is_vip_set, _vip = check_vip_changed(p, _vip, node)
        log("_is_vip_set {} _vip {}".format(_is_vip_set, _vip))

        make_connection(p, node)

        send("ok")
        log("tick..")

        time.sleep(int(t))


def make_hosts(p, node, vip=False, local=False):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""
                select node, group0, detail from node_world
                 where node = '{}' """.format(node))

    for row in cur:
        _detail = row[2]
        try:
            _detail = json.loads(_detail)
            if vip:
                _detail["is_vip"] = 1
            else:
                _detail["is_vip"] = 0

            _detail = json.dumps(_detail)

        except:
            _detail = row[2]

        if local:

            cur.execute("""UPDATE node_world
                           SET active = 0
                           WHERE date < DATETIME('NOW', '-15 seconds')""")

            cur.execute("""UPDATE node_world
                            SET detail = '{}', date = CURRENT_TIMESTAMP
                            WHERE node = '{}' """.format(_detail, node))

            con.commit()

        else:

            log("system0::node_watch::{}::{}::{}".format(row[0], row[1], _detail))
            send("system0::node_watch::{}::{}::{}".format(row[0], row[1], _detail))

    con.close()


def make_connection(p, node):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""
                select node from node_world
                  where group0 = (select group0 from node_world
                                   where node = '{}'
                                  and group0 != 'None'
                                  )
           """.format(node))

    _hosts = []
    for row in cur:
        _hosts.append(row[0])

    log("connect group {}".format(",".join(_hosts)))
    send("system::local::cast_nodes::node_watch::{}".
         format(",".join(_hosts)))

    # send to connect

    con.close()


def check_vip_changed(p, _vip, node):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""
                select node, group0, detail
                     from node_world
                    where
                      node = '{}'

           """.format(node))

    _new_vip = None
    _is_new_vip = 1
    for row in cur:
        log("check_vip_changed: {}/ {}/ {}".format(row, node, _vip))

        if row[0] == node and node is not None:
            try:
                _new_vip = json.loads(row[2]).get("vip")
            except Exception as e:
                log(e)
                _new_vip = _vip

            if _new_vip != _vip:
                _vip = _new_vip
                _is_new_vip = 0

    con.close()

    return _is_new_vip, _vip


def get_active_nodes(p):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""select s.node, count(1)
                         from node_stat s left join (select node, active, MAX(date) from node_list
                                                      where date > DATETIME('NOW', '-15 seconds')
                                                    ) l
                          on s.node = l.node
                         where s.date > DATETIME('NOW', '-15 seconds')
                            and ifnull(l.active, 1) = 1
                            and s.node NOT like '%@127.0.0.1'
                         group by s.node
                         order by s.node desc
                         -- LIMIT 1
                """)

    data = []
    cnt = 0
    for row in cur:
        data.append(row[0])
        cnt += row[1]

    # check if split from cluster

    cur.execute("""select count(1)
                     from node_world s
                      where group0 = (select group0 from node_world
                                       where uuid = '{}'
                                        and group0 != 'None'
                                  )

                """.format(os.environ["NODE_NAME"]))

    gr_count = cur.fetchone()[0]

    if len(data) < int(gr_count/2) + 1:
        return [], -1

    # check if already vip exists

    cur.execute("""select s.node
                     from node_world s
                      where group0 = (select group0 from node_world
                                       where uuid = '{}'
                                        and group0 != 'None'
                                  )
                     and s.detail like '%is_vip\": 1%'
                     and s.active = 1
                     and s.node NOT like '%@127.0.0.1'
                   order by s.node desc
                """.format(os.environ["NODE_NAME"]))

    for row in cur:
        if row[0] in data:
            data.remove(row[0])
            data.insert(0, row[0])
            break

    con.close()

    return data, cnt


def get_stats(p):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""
        select s.node, l.name
               ,MAX(ok)
               ,MAX(l.error), MAX(l.timeout), MAX(running), SUM(l.nomore)
               ,round(AVG(elapsed)/1000,2)
               ,AVG(s.count), AVG(s.cpu_percent), AVG(s.ram_percent)
               ,AVG(ns.cpu_percent), AVG(ns.ram_percent)
               ,ns.cpu_count, ns.ram_count
             from ppool_list l, ppool_stat s,
                  node_stat ns
             where l.node = s.node
                 and l.name = s.name
                 and s.node = ns.node
                 and l.date > DATETIME('NOW', '-15 seconds')
             group by s.node, s.name
           """)

    data = {}
    for row in cur:
        if data.get(row[0]) is None:
            data[row[0]] = [row]
        else:
            data[row[0]].append(row)

    con.close()

    return data


def get_ip_cmds():

    _VIP_CMDS = [
        "sudo ip a del $(ip -o addr show label {iface}:0|awk '{{ print $4 }}') dev {iface} || true",
        "sudo ip a add {vip}/255.255.255.255 broadcast {vip} dev {iface} label {iface}:0 || true",
        "sudo arping -I {iface} -c 2 -S {vip} {vip} || true",
    ]

    _RSERV_CMDS = [
        "sudo ip a del $(ip -o addr show label {iface}:0|awk '{{ print $4 }}') dev {iface} || true",
    ]

    return _VIP_CMDS, _RSERV_CMDS


def make_vip(r_servers, is_vip, vip, vip_iface):
    """
    r_servers - list of real servers
    """

    _strgy = os.environ.get("DROP_VIP_STRGY")
    log("get vip strategy..{}".format(_strgy))

    if _strgy == "none":
        return

    _VIP_CMDS, _RSERV_CMDS = get_ip_cmds()

    _vip = vip
    _iface = vip_iface

    if _vip == "127.0.0.1":
        log("WARN: not set environ DROP_VIP & DROP_VIP_IFACE..{}/{}".format(_vip, _iface))
        _vip = "none"

    log("start make_vip: {} {}".format(is_vip, r_servers))

    if is_vip:
        # vip server
        for c in _VIP_CMDS:
            _cmd = c.format(**{"iface": _iface,
                               "vip": _vip
                               })

            log(_cmd)
            log(sp.check_output("{}".format(_cmd),
                                shell=True, stderr=sp.STDOUT))

    else:
        # real server
        for c in _RSERV_CMDS:
            _cmd = c.format(**{"iface": _iface,
                               "vip": _vip
                               })
            log(_cmd)
            log(sp.check_output("{}".format(_cmd),
                                shell=True, stderr=sp.STDOUT))


def connect(p):
    return sqlite3.connect(p + '/db/node_collector.db', timeout=3)


def get_flows(p):
    lst = glob.glob(p + "/flows/*.json")

    data = []
    for i in lst:
        with open(i) as f:
            try:
                data.append(json.loads(f.read()))
            except Exception as e:
                log("flow parse {}: {}".format(i, e))

    return data


def start_init_flows(p, pstats, m_nodes, pflows):

    for f in pflows:
        try:
            f_name, f_active, f_priority, f_ppools = f.get("name"),\
                f.get("active"), f.get("priority"),\
                [[y.get("cmd").split("::")[3] for y in x.get("cook")
                  if y.get("cmd").split("::")[2] == "start_pool"]
                 for x in f.get("scenes")
                 if x["name"] == f.get("start_scene")][0]
        except Exception as e:
            log("bad flow structure {}: {}".format(f, e))
            continue

        log("read flow {} {} {} {}".format(f_name, f_active, f_priority, f_ppools))

        # if flow not active stop on all nodes
        if f_active == 0:
            log("stop on all nodes..{}".format(f_name))
            send("system::all::{}::stop".format(f_name))

        elif f_active == 1:
            # check already started
            first_start = True

            # need first start for priority 0
            if f_priority == 0:
                log("flow {} first start {}".format(f_name, first_start))
                send("system::all::{}::start".format(f_name))

            elif f_priority == 1:
                log("start on main node {} {}".format(m_nodes[0], f_name))
                # force clear
                send("system::{}::{}::start".format(m_nodes[0], f_name))
                [send("system::{}::{}::stop".format(x, f_name)) for x in m_nodes[1:]]

            for k, v in pstats.items():

                if k not in m_nodes:
                    continue

                if set(f_ppools).issubset(set([x[1] for x in v])):

                    log("on node {} flow {} is started".format(k, f_name))
                    # send("system::{}::{}::start".format(k, f_name))

                    first_start = False

                elif set([x[1] for x in v]).issubset(set(f_ppools)):
                    log("on node {} flow {} is NOT started".format(k, f_name))

                    # force clear
                    # send("system::{}::{}::stop".format(k, f_name))
                    first_start = False or first_start


if __name__ == "__main__":

    # read args actor parameters                                               
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--op', type=str, default="None", help='Mode')
    parser.add_argument('--var-dir', type=str, help='Path to var dir')
    parser.add_argument('--node', type=str, help='Node name')
    parser.add_argument('--interval',
                        type=int,
                        default=3,
                        help='Work interval')
    parser.add_argument('--vip', type=str, help='VIP')
    parser.add_argument('--vip-iface', type=str, help='VIP iface')
 
    args, _ = parser.parse_known_args()

    if args.op == "make_hosts":
        make_hosts(args.var_dir, args.node, False, True)
    else:
        main(args.var_dir, args.node, args.interval, args.vip, args.vip_iface)
