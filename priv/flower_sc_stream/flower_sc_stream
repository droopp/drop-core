#!/opt/drop-pyenv/bin/python

#
# Flow scheduler worker
#
# params
# $1 - path to var data
# $2 - node name
# $3 - time interval sc
# $4 - vip
# $5 - vip iface

import sys
import os
import time
import json
import sqlite3
import glob
import subprocess as sp
from vip import private, cloud

# API


def read():
    line = sys.stdin.readline()
    return line.strip()


def log(m):
    sys.stderr.write("{}: {}\n".format(time.time(), m))
    sys.stderr.flush()


def send(m):
    sys.stdout.write("{}\n".format(m))
    sys.stdout.flush()

# Process - actor
#  read - recieve message from world
#  send - send message to world
#  log  -  logging anything


# _VIP_CMDS = [
#     "sudo ifconfig {iface}:0 down",
#     "sudo ifconfig {iface}:0 {vip} netmask 255.255.255.255 broadcast {vip}",
#     "sudo arping -I {iface} -c 2 -s {vip} {vip}"
# ]

# _RSERV_CMDS = [
#     "sudo ifconfig {iface}:0 down",
# ]


def main(p, node, t, vip, vip_iface):
    """
        t - time interval in secs
    """
    tb = time.time()

    # set vip

    msg = read()
    _is_vip_set = 0
    _vip = vip

    log("get message: " + msg)

    while 1:

        #  set clester network balancer
        #  get main node floating ip
        log("get main node..")
        m_nodes, m_cnt = get_active_nodes(p)

        log("get active nodes: {}".format(m_nodes))

        if len(m_nodes) == 0:
            m_node = None
        else:
            m_node = m_nodes[0]
            m_cnt = m_cnt/len(m_nodes)

        if m_node != node:
            log("i'm not main node {} ..set rserv".format(m_node))

            # not set or set to main
            if _is_vip_set == 0 or _is_vip_set == 1:
                # set real server
                make_vip(m_nodes, False, _vip, vip_iface)
                _is_vip_set = 2

            if time.time() - tb < int(t) * 5:
                send("ok")

                time.sleep(int(t))
                continue
            else:
                tb = time.time()
                make_hosts(p, node)
                make_connection(p, node)

                send("ok")
                log("tick..")

                time.sleep(int(t))
                continue

        else:

            # not set or set to main
            if _is_vip_set == 0 or _is_vip_set == 2:
                # set real server
                make_vip(m_nodes, True, _vip, vip_iface)
                _is_vip_set = 1

            if m_cnt < 1:
                log("main node {} but not enough metrics {}".format(m_node, m_cnt))
                send("ok")

                time.sleep(int(t))
                continue

            log("main node {} ..set admin".format(m_node))

        if time.time() - tb < int(t) * 5:
            send("ok")

            time.sleep(int(t))
            continue
        else:
            tb = time.time()
            make_hosts(p, node, True)

        # get node's statistic
        log("get stats..")
        pstats = get_stats(p)

        #  get flows scenes
        #  start/stop flows

        log("start init flows..")

        _strgy = os.environ.get("DROP_STRATEGY", "simple")
        log("get strategy..{}".format(_strgy))

        _mod = __import__("strategy." + _strgy)
        _strgy = getattr(_mod, _strgy)

        _strgy.do(p, pstats, m_nodes, get_flows(p))

        #  get services
        #  start/stop services

        log("start init services..")

        start_init_services(p, pstats, m_nodes)

        # check vip changed
        _is_vip_set, _vip = check_vip_changed(p, _vip, node)
        log("_is_vip_set {} _vip {}".format(_is_vip_set, _vip))

        make_connection(p, node)

        send("ok")
        log("tick..")

        time.sleep(int(t))


def make_hosts(p, node, vip=False):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""
                select node, group0, detail from node_world
                 where node = '{}' """.format(node))

    for row in cur:
        _detail = row[2]
        try:
            _detail = json.loads(_detail)
            if vip:
                _detail["is_vip"] = 1
            else:
                _detail["is_vip"] = 0

            _detail = json.dumps(_detail)

        except:
            _detail = row[2]

        log("system0::node_watch::{}::{}::{}".format(row[0], row[1], _detail))
        send("system0::node_watch::{}::{}::{}".format(row[0], row[1], _detail))

    con.close()


def make_connection(p, node):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""
                select node from node_world
                  where group0 = (select group0 from node_world
                                   where node = '{}'
                                  and group0 != 'None'
                                  )
           """.format(node))

    _hosts = []
    for row in cur:
        _hosts.append(row[0])

    log("connect group {}".format(",".join(_hosts)))
    send("system::local::cast_nodes::node_watch::{}".
         format(",".join(_hosts)))

    # send to connect

    con.close()


def check_vip_changed(p, _vip, node):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""
                select node, group0, detail
                     from node_world
                    where
                      node = '{}'

           """.format(node))

    _new_vip = None
    _is_new_vip = 1
    for row in cur:
        log("check_vip_changed: {}/ {}/ {}".format(row, node, _vip))

        if row[0] == node and node is not None:
            try:
                _new_vip = json.loads(row[2]).get("vip")
            except Exception as e:
                log(e)
                _new_vip = _vip

            if _new_vip != _vip:
                _vip = _new_vip
                _is_new_vip = 0

    con.close()

    return _is_new_vip, _vip


def start_init_services(p, pstats, m_nodes):

    con = connect(p)
    cur = con.cursor()

    log("read service conf...")

    cur.execute("""
                select detail from node_world
                 where node = '{}' """.format(m_nodes[0]))

    for row in cur:
        try:
            _serv = json.loads(row[0])["service"]

            for k, v in _serv.items():
                log("...service {}/ code {}".format(k, v))

                _cmd = []
                v = int(v)

                if v == 0:
                    _cmd.append("system::all::cast_worker::cmd-exec::{}".
                                format(json.dumps({"cmd": "systemctl stop {}".format(k)}))
                                )

                elif v == 1:
                    _cmd.append("system::{}::cast_worker::cmd-exec::{}".
                                format(m_nodes[0],
                                       json.dumps({"cmd": "systemctl start {}".format(k)}))
                                )

                elif v > 1:
                    _cmd = ["system::{}::cast_worker::cmd-exec::{}".
                            format(x, json.dumps({"cmd": "systemctl start {}".format(k)}))
                            for x in m_nodes[:v]]

                else:
                    log("...bad code {} service {}".format(v, k))

                log("...service _cmd: {}".format(_cmd))

                # send cmds
                [send(x) for x in _cmd]

                # send stop other
                if v > 0:
                    _cmd2 = ["system::{}::cast_worker::cmd-exec::{}".
                             format(x, json.dumps({"cmd": "systemctl stop {}".format(k)}))
                             for x in m_nodes[v:]]
                    log("...service stop _cmd2: {}".format(_cmd2))

                    [send(x) for x in _cmd2]

        except Exception as e:
            log(e)

    con.close()

    return


def get_active_nodes(p):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""select s.node, count(1)
                         from node_stat s left join (select node, active, MAX(date) from node_list
                                                      where date > DATETIME('NOW', '-15 seconds')
                                                    ) l
                          on s.node = l.node
                         where s.date > DATETIME('NOW', '-15 seconds')
                            and ifnull(l.active, 1) = 1
                         group by s.node
                         order by s.node desc
                         -- LIMIT 1
                """)

    data = []
    cnt = 0
    for row in cur:
        data.append(row[0])
        cnt += row[1]

    # check if already vip exists

    cur.execute("""select s.node
                     from node_world s
                   where s.group0 != 'None'
                     and s.detail like '%is_vip\": 1%'
                     and s.active = 1
                """)

    for row in cur:
        if row[0] in data:
            data.remove(row[0])
            data.insert(0, row[0])
            break

    con.close()

    return data, cnt


def get_stats(p):
    con = connect(p)
    cur = con.cursor()

    cur.execute("""
        select s.node, l.name
               ,MAX(ok)
               ,MAX(l.error), MAX(l.timeout), MAX(running), SUM(l.nomore)
               ,round(AVG(elapsed)/1000,2)
               ,AVG(s.count), AVG(s.cpu_percent), AVG(s.ram_percent)
               ,AVG(ns.cpu_percent), AVG(ns.ram_percent)
               ,ns.cpu_count, ns.ram_count
             from ppool_list l, ppool_stat s,
                  node_stat ns
             where l.node = s.node
                 and l.name = s.name
                 and s.node = ns.node
                 and l.date > DATETIME('NOW', '-15 seconds')
             group by s.node, s.name
           """)

    data = {}
    for row in cur:
        if data.get(row[0]) is None:
            data[row[0]] = [row]
        else:
            data[row[0]].append(row)

    con.close()

    return data


def make_vip(r_servers, is_vip, vip, vip_iface):
    """
    r_servers - list of real servers
    """

    _strgy = os.environ.get("DROP_VIP_STRGY")
    log("get vip strategy..{}".format(_strgy))

    if _strgy == "none":
        return

    if _strgy is None:
        _VIP_CMDS, _RSERV_CMDS = private.get()
    else:
        _VIP_CMDS, _RSERV_CMDS = cloud.get(_strgy)

    _vip = vip
    _iface = vip_iface

    if _vip == "127.0.0.1":
        log("WARN: not set environ DROP_VIP & DROP_VIP_IFACE..{}/{}".format(_vip, _iface))
        _vip = "none"

    log("start make_vip: {} {}".format(is_vip, r_servers))

    if is_vip:

        for c in _VIP_CMDS:
            _cmd = c.format(**{"iface": _iface,
                               "vip": _vip
                               })

            log(_cmd)
            log(sp.check_output("{}".format(_cmd),
                                shell=True, stderr=sp.STDOUT))

    else:
        # real server
        for c in _RSERV_CMDS:
            _cmd = c.format(**{"iface": _iface,
                               "vip": _vip
                               })
            log(_cmd)
            log(sp.check_output("{}".format(_cmd),
                                shell=True, stderr=sp.STDOUT))

    return


def connect(p):
    return sqlite3.connect(p + '/db/node_collector.db', timeout=3)


def get_flows(p):
    l = glob.glob(p + "/flows/*.json")

    data = []
    for i in l:
        with open(i) as f:
            try:
                data.append(json.loads(f.read()))
            except Exception as e:
                log("flow parse {}: {}".format(i, e))

    return data


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5])
